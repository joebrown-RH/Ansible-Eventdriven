- name: Create a list for each host with advisories
  ansible.builtin.set_fact:
    hosts_with_adv: "{{ hosts_with_adv | default([]) + [{'hostname': insights_adv_host_data.display_name,
                                    'insights_id': insights_adv_host_data.inventory_id,
                                    'advisory_id': item.payload.advisory_id,
                                    'advisory_name': item.payload.advisory_name,
                                    'advisory_type': item.payload.advisory_type}] }}"
  loop: "{{ insights_adv_data }}"
  delegate_to: localhost

#    - name: Debug message
#      ansible.builtin.debug:
#        msg:
#          - "hostname: {{ item.hostname }}"
#          - "insights_id: {{ item.insights_id }}"
#          - "advisory_id: {{ item.advisory_id }}"
#          - "advisory_name: {{ item.advisory_name }}"
#          - "advisory_type:  {{ item.advisory_type }}"
#      loop: "{{ hosts_with_adv }}"

- name: Create a list of advisories
  no_log: true
  ansible.builtin.uri:
    url: "{{ insights_api_url }}/patch/v3/advisories/{{ item.advisory_name }}"
    method: GET
    return_content: true
    user: "{{ insights_auth_user }}"
    password: "{{ insights_auth_password }}"
    force_basic_auth: true
    status_code: 200
  register: insights_cves
  loop: "{{ hosts_with_adv }}"
  delegate_to: localhost

- name: Create a list for each host with CVEs
  ansible.builtin.set_fact:
    hosts_with_cve: "{{ hosts_with_cve | default([]) + [{'hostname': insights_adv_host_data.display_name,
                                    'insights_id': insights_adv_host_data.inventory_id,
                                    'advisory_id': item.json.data.id,
                                    'cves': item.json.data.attributes.cves,
                                    'advisory_type_name': item.json.data.attributes.advisory_type_name,
                                    'severity': item.json.data.attributes.severity,
                                    'description': item.json.data.attributes.description}] }}"
  loop: "{{ insights_cves.results }}"
  delegate_to: localhost
  when: item.json.data.attributes.cves | length > 0

- name: Create a list of security CVEs with severity >= 3
  ansible.builtin.set_fact:
    cve_list: "{{ cve_list | default([]) + item.cves }}"
  loop: "{{ hosts_with_cve }}"
  delegate_to: localhost
  when:
    - item.severity | int >= 3
    - item.advisory_type_name == 'security'
    - hosts_with_cve is defined

- name: If there are in fact any CVEs that are security and with a severity >= 3
  when:
    - cve_list is defined
    - hosts_with_cve is defined
  block:
    - name: Print out the total number of security CVEs with severity >= 3 for host "{{ insights_adv_target_host }}"
      ansible.builtin.debug:
        msg: "Detected {{ cve_list | length }} security CVEs with severity >= 3 out of {{ hosts_with_cve }} for host {{ insights_adv_target_host }}"
      loop: "{{ cve_list }}"
      delegate_to: localhost

    - name: Send notification message via Mattermost on CVE Issue
      community.general.mattermost:
        url: "{{ mattermost_url }}"
        api_key: "{{ mattermost_api_key }}"
        attachments:
          - text: "! ALERT !"
            color: '#ff00dd'
            title: "CVE Issue"
            fields:
              - title: Issue
                value: "CVE Issue Detected"
                short: true
              - title: Details
                value: "Detected {{ cve_list | length }} CVEs on host {{ insights_adv_target_host }}."
                short: true
      delegate_to: localhost

    - name: Generate playbooks in Insights to remediate vulnerabilities
      ansible.builtin.uri:
        url: "{{ insights_api_url }}/remediations/v1/remediations"
        method: POST
        user: "{{ insights_auth_user }}"
        password: "{{ insights_auth_password }}"
        validate_certs: false
        force_basic_auth: true
        status_code: 201
        return_content: true
        headers:
          Content-Type: "application/json"
          accept: "text/vnd.yaml"
          Connection: "keep-alive"
        body_format: json
        body: "{{ lookup('ansible.builtin.template', 'templates/pb_generator_body.j2') }}"
      register: pbs_per_host
      loop: "{{ cve_list | first | split }}"
      delegate_to: localhost

    - name: Launch a project update from Red Hat Insights
      ansible.controller.project_update:
        project: "Red Hat Insights"
        timeout: 60
        validate_certs: false

    - name: Perform remediation tasks using AAP
      ansible.builtin.include_tasks: remediation.yml
      loop: "{{ cve_list | first | split }}"
      loop_control:
        index_var: my_idx

- name: If no CVE_list
  when: cve_list is not defined
  block:
    - name: Send notification message via Mattermost on no CVEs
      community.general.mattermost:
        url: "{{ mattermost_url }}"
        api_key: "{{ mattermost_api_key }}"
        attachments:
          - text: "! ALERT !"
            color: '#ff00dd'
            title: "CVE None Issue"
            fields:
              - title: Issue
                value: "CVE None Issue"
                short: true
              - title: Details
                value: "No important security CVEs detected on host {{ insights_adv_target_host }}."
                short: true
      delegate_to: localhost
